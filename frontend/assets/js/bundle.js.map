{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB,GAAG,sBAAsB,GAAG,kBAAkB,GAAG,uBAAuB,GAAG,gBAAgB,GAAG,gCAAgC;AACnJ,gBAAgB,mBAAO,CAAC,+BAAS;AACjC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;;;;ACtDR;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,uBAAuB,GAAG,qBAAqB,GAAG,kBAAkB,GAAG,0BAA0B;AAC7H,mBAAmB,mBAAO,CAAC,qCAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,+BAA+B;;AAE3D;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;;AAElD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,IAAI;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,GAAG;;;;;;;;;;;AChQK;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,oBAAoB,GAAG,qBAAqB,GAAG,qBAAqB,GAAG,oBAAoB;AACpH,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;UCtBtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA,YAAY,6CAA6C;AACzD,SAAS,4CAA4C,gBAAgB;AACrE,gBAAgB,mBAAO,CAAC,+BAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,qCAAqC;AACrC","sources":["webpack://test-vite/./src/business.ts","webpack://test-vite/./src/class.ts","webpack://test-vite/./src/utils.ts","webpack://test-vite/webpack/bootstrap","webpack://test-vite/./src/index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addValorFinal = exports.addCustosFixos = exports.valorFinal = exports.valorGastosFixo = exports.costUnit = exports.totalAmountPerIngredient = void 0;\nconst utils_1 = require(\"./utils\");\nconst totalAmountPerIngredient = (ingredient) => (ingredient.marketPrice * ingredient.grossWeight) / ingredient.marketWeight;\nexports.totalAmountPerIngredient = totalAmountPerIngredient;\nconst costUnit = (partialValueOfRecipe, servings, packaging) => {\n    if (!servings || !packaging)\n        return 0;\n    const valueCostUnit = partialValueOfRecipe / servings + packaging;\n    return valueCostUnit;\n};\nexports.costUnit = costUnit;\nconst valorGastosFixo = () => {\n    const diasTrabalhados = (0, utils_1.getValueInput)('#rangeDiasDeTrabalho', Number);\n    const vendasPorDia = (0, utils_1.getValueInput)('#inputVendasPorDia', Number);\n    const gastosFixos = (0, utils_1.getValueInput)('#inputGastosFixos', Number);\n    if (vendasPorDia === undefined || gastosFixos === undefined)\n        return '0,00';\n    if (typeof gastosFixos === 'number' &&\n        typeof diasTrabalhados === 'number' &&\n        typeof vendasPorDia === 'number') {\n        const result = gastosFixos / (diasTrabalhados * 4 * vendasPorDia);\n        if (!isNaN(result)) {\n            utils_1.temporaryObj.valueGF = result;\n            return (0, utils_1.formatNumber)(result);\n        }\n    }\n    return '0,00';\n};\nexports.valorGastosFixo = valorGastosFixo;\nconst valorFinal = () => {\n    const rangeValue = (0, utils_1.getValueInput)('#rangeLucro', Number);\n    const valorFinalProduto = utils_1.temporaryObj.valueUnit + utils_1.temporaryObj.valueGF;\n    if (typeof rangeValue === 'number') {\n        const resultFinal = valorFinalProduto + valorFinalProduto * (rangeValue / 100);\n        return (0, utils_1.formatNumber)(resultFinal);\n    }\n    return '0,00';\n};\nexports.valorFinal = valorFinal;\n/* export const addCustoUni = () => {\n  const value = costUnit();\n  setResultInDiv('#divCostUnit', value);\n}; */\nconst addCustosFixos = () => {\n    const value = (0, exports.valorGastosFixo)();\n    (0, utils_1.setResultInDiv)('#divCustoFixo', value);\n};\nexports.addCustosFixos = addCustosFixos;\nconst addValorFinal = () => {\n    const value = (0, exports.valorFinal)();\n    (0, utils_1.setResultInDiv)('#divLucro', value);\n};\nexports.addValorFinal = addValorFinal;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TableProfitMargin = exports.TableFixedCosts = exports.TableCostUnit = exports.Ingredient = exports.TableOfIngredients = void 0;\nconst business_1 = require(\"./business\");\nclass TableOfIngredients {\n    constructor() {\n        this._ingredients = [];\n        this._valuePartialOfRecipe = 0;\n    }\n    // valor parcial da receita e usar pela intancia no arquivo index.\n    set ingredients(ingredient) {\n        // addIngredient\n        this._ingredients.push(ingredient);\n        /* Outra forma => Caso queira inserir todos os elementos novamente substituindo todos os anteriores.\n          for (const currentIngredient of ingredients) {\n          this._ingredients.push(currentIngredient);\n        } */\n        ingredient._realAmount = (0, business_1.totalAmountPerIngredient)(ingredient);\n        this.setIngredientInTheContents(...this._ingredients);\n        this.valuePartialOfRecipe = ingredient._realAmount;\n    }\n    get ingredients() {\n        return this._ingredients;\n    }\n    set valuePartialOfRecipe(value) {\n        this._valuePartialOfRecipe += value;\n    }\n    getValuePartialOfRecipe() {\n        return this._valuePartialOfRecipe;\n    }\n    setIngredientInTheContents(...ingredients) {\n        for (const current of ingredients) {\n            console.log(current.describe);\n        }\n        // Vai setar no html o elemento.\n        /*\n          for (const currentIngredient of ingredients) {\n          row.innerHTML.text = currentIngredient\n          Ou em uma lista/tabela de 0 1 2 3 4 5 6 7 8 9 10 | e toda vez que chamada ele seta os valores novamente.\n          Atualizando sempre do índice 0.\n        */\n    }\n}\nexports.TableOfIngredients = TableOfIngredients;\nclass Ingredient {\n    constructor(describe, marketWeight, marketPrice, grossWeight, _realAmount) {\n        this.describe = describe;\n        this.marketWeight = marketWeight;\n        this.marketPrice = marketPrice;\n        this.grossWeight = grossWeight;\n        this._realAmount = _realAmount;\n    }\n    set realAmount(value) {\n        this._realAmount = value;\n    }\n}\nexports.Ingredient = Ingredient;\nclass TableCostUnit {\n    // isso é uma injeção de dependencia => é uma forma mais \"fechada\".\n    // Pq a costUnit depende de outra class, o melhor seria criar uma abstração da classe\n    constructor(tableOfIngredients) {\n        this.tableOfIngredients = tableOfIngredients;\n        this._servings = 0;\n        this._packaging = 0;\n        this._costUnit = 0;\n    }\n    set servings(value) {\n        this._servings = value;\n        // chamar o custo unitario novamente\n    }\n    get servings() {\n        return this._servings;\n    }\n    set packaging(value) {\n        this._packaging = value;\n    }\n    get packaging() {\n        return this._packaging;\n    }\n    setCostUnit() {\n        this._costUnit = (0, business_1.costUnit)(this.tableOfIngredients._valuePartialOfRecipe, this.servings, this.packaging);\n    }\n    get costUnit() {\n        return this._costUnit;\n    }\n    addCostUnit() { }\n}\nexports.TableCostUnit = TableCostUnit;\nclass TableFixedCosts {\n    constructor() {\n        this._daysWorked = 0;\n        this._salesPerDay = 0;\n        this._fixedCosts = 0;\n    }\n    set daysWorked(value) {\n        this._daysWorked;\n    }\n    get daysWorked() {\n        return this._daysWorked;\n    }\n    set salesPerDay(value) {\n        this._salesPerDay = value;\n    }\n    get salesPerDay() {\n        return this._salesPerDay;\n    }\n    set fixedCosts(value) {\n        this._fixedCosts = value;\n    }\n    get fixedCosts() {\n        return this._fixedCosts;\n    }\n    addFixedCosts() { }\n}\nexports.TableFixedCosts = TableFixedCosts;\nclass TableProfitMargin {\n    constructor() {\n        this._profitMargin = 0;\n    }\n    set profitMargin(value) {\n        this._profitMargin = value;\n    }\n    get profitMargin() {\n        return this._profitMargin;\n    }\n    addProfitMargin() { }\n}\nexports.TableProfitMargin = TableProfitMargin;\n/* -------------------------------------------------------------------------------- */\n/* class Food {\n  constructor(\n    public ingredients: string,\n    public marketWeight: number,\n    public marketPrice: number,\n    public grossWeight: number\n  ) {}\n\n  addFood() {\n    if (!Food.validInputs()) return;\n    \n    const table = selectElement('#foodTable') as HTMLTableElement | null;\n    if (!table) {\n      console.error('Table element not found');\n      return;\n    }\n    \n    const newRow = table.insertRow(2);\n    \n    const cell1 = newRow.insertCell(0);\n    cell1.innerHTML = this.ingredients;\n\n    const cell2 = newRow.insertCell(1);\n    cell2.innerHTML = this.marketWeight.toString();\n\n    const cell3 = newRow.insertCell(2);\n    cell3.innerHTML = `R$ ${formatNumber(this.marketPrice)}`;\n\n    const cell4 = newRow.insertCell(3);\n    cell4.innerHTML = this.grossWeight.toString();\n\n    const cell5 = newRow.insertCell(4);\n    const costUni = this.costReal();\n    temporaryObj.valueTot += costUni;\n    cell5.setAttribute('class', 'thResult');\n    cell5.innerHTML = `R$ ${formatNumber(costUni)}`;\n\n    this.addCostTot();\n    addCustoUni();\n    Food.clearInputs();\n  }\n\n  costReal(): number {\n    return (this.marketPrice / this.marketWeight) * this.grossWeight;\n  }\n\n  addCostTot(): void {\n    const div = selectElement('#custoTot');\n    const tot = formatNumber(temporaryObj.valueTot);\n    if (div) div.innerHTML = `R$ ${tot}`;\n  }\n\n  static validInputs(): boolean {\n    for (const input of document.querySelectorAll('.inputForm')) {\n      if (input instanceof HTMLInputElement) {\n        if (!input.value) {\n          alert('Preencha os dados corretamente.');\n          input.focus();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  static clearInputs() {\n    for (const input of document.querySelectorAll('.inputForm')) {\n      if (input instanceof HTMLInputElement) input.value = '';\n    }\n    const element = selectElement('#ingredients') as HTMLInputElement;\n    if (element) element.focus();\n  }\n}\n */\n/* ---------------------------------------------------------------------------- */\n/* document.addEventListener('click', function (event: MouseEvent) {\n      const el = event.target as HTMLElement;\n    \n      if (el.classList.contains('btnAdd')) {\n        const food = new Food(\n          valueIngredient,\n          valueMarketWeight,\n          valueMarketPrice,\n          valueGrossWeight\n        );\n        food.addFood();\n      }\n    });\n    \n    document.addEventListener('input', function (event: Event) {\n      const el = event.target as HTMLElement;\n    \n      if (\n        el.classList.contains('inputUnit') ||\n        el.classList.contains('inputPacket')\n      ) {\n        addCustoUni();\n      }\n      if (el.classList.contains('rangeLucro')) {\n        addValorFinal();\n      }\n      if (\n        el.classList.contains('rangeDiasDeTrabalho') ||\n        el.classList.contains('inputVendasPorDias') ||\n        el.classList.contains('inputGastosFixos')\n      ) {\n        addCustosFixos();\n      }\n    });\n    \n    document.addEventListener('keydown', function (event: KeyboardEvent) {\n      const inputs = document.querySelectorAll<HTMLElement>('#foodTable input');\n      if (\n        event.key === 'Enter' &&\n        Array.from(inputs).includes(document.activeElement as HTMLElement)\n      ) {\n        const food = new ingredient(\n          valueIngredient,\n          valueMarketWeight,\n          valueMarketPrice,\n          valueGrossWeight\n        );\n        table.insert_ingredients(valueIngredient,\n          valueMarketWeight,\n          valueMarketPrice,\n          valueGrossWeight);\n      }\n    }); */\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setResultInDiv = exports.formatNumber = exports.getValueInput = exports.selectElement = exports.temporaryObj = void 0;\nexports.temporaryObj = {\n    valueTot: 0,\n    valueUnit: 0,\n    valueGF: 0\n};\nconst selectElement = (selector) => document.querySelector(selector);\nexports.selectElement = selectElement;\nconst getValueInput = (selector, type) => {\n    const element = (0, exports.selectElement)(selector);\n    return type(element.value);\n};\nexports.getValueInput = getValueInput;\nconst formatNumber = (value) => value.toFixed(2).replace('.', ',');\nexports.formatNumber = formatNumber;\nconst setResultInDiv = (selector, value) => {\n    const div = (0, exports.selectElement)(selector);\n    if (div)\n        div.innerHTML = value;\n};\nexports.setResultInDiv = setResultInDiv;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// criar controllers para gerenciar as requisições.\n/* import { addCustoUni, addCustosFixos, addValorFinal } from './business';\nimport { selectElement, formatNumber, temporaryObj } from './utils'; */\nconst class_1 = require(\"./class\");\n// Ja inicia o programa com a instrancias criadas e passadas como props.\n// Assim fica uma dependencia muito forte.\n// Fazer abstração\nconst tableOfIngredients = new class_1.TableOfIngredients();\nconst comida1 = new class_1.Ingredient('comida1', 6, 10, 3);\nconst comida2 = new class_1.Ingredient('comida2', 6, 10, 3);\ntableOfIngredients.ingredients = comida1;\ntableOfIngredients.ingredients = comida2;\nconst tableCostUnit = new class_1.TableCostUnit(tableOfIngredients);\ntableCostUnit.servings = 2;\ntableCostUnit.packaging = 1;\ntableCostUnit.setCostUnit(); // => 6\nconsole.log(tableCostUnit.costUnit); // => 6\n// Chamar pela instancia o valor dos valores de dentro dos obj.\n"],"names":[],"sourceRoot":""}